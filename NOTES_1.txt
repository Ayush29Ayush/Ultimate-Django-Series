#! SECTION - 1 (Django Fundamentals)
A) Introduction to Django
B) Fundamentals of webdev
C) Setting up development environment
D) First Django Project
E) 2 essential debugging techniques

#? A. Introduction to Django
1. It is a batteries included framework which comes with functionalities liek admin site, object-relation mapping (ORM), template system, authentication system, caching, and many more.

#? B. Fundamentals of webdev
1. Frontend is the client responsible for the user interface and data visualization of the website. Backend is the server responsible for the database, security, caching, and user authentication. 
2. The website has a URL i.e Uniform Resource Locator.  
3. When the url is typed in the browser, it is called as a request. That request is sent to the server. It uses the http protocol.
4. The response of the server is called as a response.
5. The response is sent back to the browser. The response can be in form of HTML, JSON, XML, etc.
6. We have front-end client side frameworks like Angular, React, Vue, etc. and backend server side frameworks like Django, Flask, etc.
7. We send the data in the form of API i.e Application Programming Interface.

#? C. Setting up development environment
1. Create a virtual environment using the command: python -m venv venv
2. Activate the virtual environment using: source venv/bin/activate
3. Install Django using: pip install django
4. Store requirements in requirements.txt using the command: pip freeze > requirements.txt
5. Type "django-admin" to know all the commands we can use in django.
6. Type "django-admin startproject storefront . " to create a project named storefront.
7. Type "python manage.py startapp playground" to create a new app named playground.

#? D. First Django Project and App
1. Create a view named say_hello in views.py
2. Create a urls.py file in apps directory and add the url configuration to urls.py of project's directory.
3. Create a template in templates directory which should be located in the apps directory.

#? E. 2 essential debugging techniques
# TODO Attempt to debug Django applications in VS code
1. Debugging Django Applications in VS code
2. Click the "Debug" button in the VS code. 
3. Now click on the "create a launch.json" file.
4. Select python debugger and then django debugger. 
5. Add this code
"
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python Debugger: Django",
            "type": "debugpy",
            "request": "launch",
            "args": [
                "runserver",
                "9000"
            ],
            "django": true,
            "autoStartBrowser": false,
            "program": "${workspaceFolder}\\Ultimate Django Series 1\\manage.py"
        }
    ]
}
"
6. Now set a breakpoint in the view code.
7. Use F10 to step over to the next line of code. You can see all the debugger options on the top of the code screen.
8. Keep a track of the locals and globals in the debugger.
#! IMPORTANT
9. Add the variable you want to keep track on in the "WATCH" tab of the debugger. Just click the "+" button in the "WATCH" tab.
10. Use the "STEP INTO" button i.e the F11 button to step into the function code.
11. Use the "STEP OUT" button i.e the F12 button to step out of the function code.

#! IMPORTANT
12. You can run your django app without typing python manage.py runserver by using "Ctrl + F5". This will run the django app in the background without the debugger.

# TODO -> Use django-debug-toolbar to debug Django applications
13. Install django-debug-toolbar using: pip install django-debug-toolbar
14. Add it to INSTALLED_APPS in settings.py
15. Add it to MIDDLEWARE in settings.py
16. Add the urls.py to project's urls.py
17. Add INTERNAL_IPS in settings.py
18. You may also add DEBUG_TOOLBAR_PANELS in settings.py
19. Your template code should have html tag with body. Them only the django-debug-toolbar will be visible.
19. Refer "https://django-debug-toolbar.readthedocs.io/en/latest/installation.html" and "https://django-debug-toolbar.readthedocs.io/en/latest/configuration.html"

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#! SECTION - 2 (Django Models)
Refer => "https://docs.djangoproject.com/en/5.0/ref/models/fields/"
A) Data Models
B) Build e-commerce data Models
C) Organizing models in apps
D) Coding Model classes
"
Creating Models 
Choice Fields
Defining One-to-one and Many-to-one Relationships 
Resolving Circular Relationships
Generic Relationships
"

1. We will have a "STORE" which will have models like "Product", "Collection", "Cart", "CartItem", "Order", "OrderItem", "Customer". This is MONOLITHIC i.e all the fields in one single model. This gets complex as we add more features.
2. To solve this, we will break it to various small apps like "PRODUCTS", "COLLECTIONS", "CARTS", "ORDERS", "CUSTOMERS". This is ORGANIZING MODELS in apps.
#! PRODUCTS
a) Product
b) Collection
c) Tag 
#! CUSTOMERS
a) Customer
#! CARTS
a) Cart
b) CartItem
#! ORDERS
a) Order
b) OrderItem
3. But this approach too is not scalable as each model will be dependent on other models. So we will use "Django ORM".
4. We will have 2 apps, "store" and "tags".
5. Type "python manage.py startapp store" and "python manage.py startapp tags" in the terminal.
6. Add these apps in the INSTALLED_APPS in settings.py

#! CHOICE FIELDS - If a mapping is given, the key element is the actual value to be set on the model, and the second element is the human readable name.
#? Method - 1
"
class Customer(models.Model):
    MEMBERSHIP_CHOICES = [
        ("B", "Bronze"),
        ("S", "Silver"),
        ("G", "Gold"),
    ]

    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    email = models.EmailField(unique=True)
    phone = models.CharField(max_length=255)
    birth_date = models.DateField(null=True)
    membership = models.CharField(
        max_length=1,
        choices=MEMBERSHIP_CHOICES,
        default="B",
    )
"
#? Method - 2  MORE ELEGANT
"
class Customer(models.Model):
    MEMBERSHIP_BRONZE = "B"
    MEMBERSHIP_SILVER = "S"
    MEMBERSHIP_GOLD = "G"

    MEMBERSHIP_CHOICES = [
        (MEMBERSHIP_BRONZE, "Bronze"),
        (MEMBERSHIP_SILVER, "Silver"),
        (MEMBERSHIP_GOLD, "Gold"),
    ]

    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    email = models.EmailField(unique=True)
    phone = models.CharField(max_length=255)
    birth_date = models.DateField(null=True)
    membership = models.CharField(
        max_length=1,
        choices=MEMBERSHIP_CHOICES,
        default=MEMBERSHIP_BRONZE,
    )
"

#! README: The primary difference between using a OneToOneField and a ForeignKey in Django models is the nature of the relationship they define between the two models.
OneToOneField
A OneToOneField creates a one-to-one relationship between two models. This means that each instance of the referenced model can be related to exactly one instance of the model that contains the OneToOneField, and vice versa. It is a special case of a foreign key with unique constraints.

ForeignKey
A ForeignKey creates a one-to-many relationship between two models. This means that each instance of the referenced model can be related to multiple instances of the model that contains the ForeignKey.

#! Defining One-to-one Relationships 
# Here, the Customer is the parent class and the Address is the child class.
# Here we want that each customer has only one address.
"
class Address(models.Model):
    street = models.CharField(max_length=255)
    city = models.CharField(max_length=255)
    customer = models.OneToOneField(Customer, on_delete=models.CASCADE, primary_key=True)
"

#! Defining One-to-many Relationships
"
class Address(models.Model):
    street = models.CharField(max_length=255)
    city = models.CharField(max_length=255)
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
"

#! Defining Many-to-many Relationships
"
class Promotion(models.Model):
    description = models.CharField(max_length=255)
    discount = models.FloatField()
    # product_set is be named as products when related_name is set to 'products


# Product can have many promotions. Product is the parent class and Promotion is the child class.
class Product(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField(max_digits=6, decimal_places=2)
    inventory = models.IntegerField()
    last_update = models.DateTimeField(auto_now=True)
    collection = models.ForeignKey(Collection, on_delete=models.PROTECT)
    promotions = models.ManyToManyField(Promotion)
    # promotions = models.ManyToManyField(Promotion, related_name='products')
"

#! Resolving Circular Relationships
"
class Collection(models.Model):
    title = models.CharField(max_length=255)
    featured_product = models.ForeignKey("Product", on_delete=models.SET_NULL, null=True, related_name="+")


class Product(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField(max_digits=6, decimal_places=2)
    inventory = models.IntegerField()
    last_update = models.DateTimeField(auto_now=True)
    collection = models.ForeignKey(Collection, on_delete=models.PROTECT)
    promotions = models.ManyToManyField(Promotion)
"

#! Generic Relations - VERY IMPORTANT
"
from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey

class Tag(models.Model):
    label = models.CharField(max_length=255)
    
class TaggedItem(models.Model):
    # What tag applied to what object
    tag = models.ForeignKey(Tag, on_delete=models.CASCADE)
    # What type of object is being tagged (eg. product, article)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    # ID
    object_id = models.PositiveIntegerField()  
    content_object = GenericForeignKey('content_type', 'object_id')
"

Fields Explained:

* user: The user who liked the item.
* content_type: A ForeignKey to the ContentType model, identifying the model of the liked item (e.g., Post, Comment, Photo).
* object_id: The primary key of the liked item.
* content_object: A GenericForeignKey that combines content_type and object_id to create a dynamic relation to any model instance.
-----------------------------------------------------------------------------------------------------------------------------------------------
The ContentType and GenericForeignKey fields are part of Django's contenttypes framework, which allows for creating generic relationships between models. This can be useful when you want to relate a model to any other model, not just one specific model.

#! ContentType
ContentType is a model provided by Django's contenttypes framework that keeps track of all the models installed in your Django project.
Each instance of ContentType represents a different model in the project, identified by its app label and model name.

#! GenericForeignKey
GenericForeignKey is a way to create a foreign key-like relationship that can point to any model.
It requires two additional fields: content_type and object_id.
content_type is a ForeignKey to the ContentType model.
object_id is a field that stores the primary key of the related object.
GenericForeignKey does not create a database-level constraint but works at the ORM level.
-----------------------------------------------------------------------------------------------------------------------
Creating a LikedItem Instance:

Suppose you have a Post model and a Comment model, and you want users to be able to like both posts and comments.
"
from myapp.models import Post, Comment
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth.models import User
from myapp.models import LikedItem

# Create some objects
user = User.objects.create(username="john")
post = Post.objects.create(title="A Post", content="Post content")
comment = Comment.objects.create(post=post, text="A comment")

# Liking a post
post_content_type = ContentType.objects.get_for_model(Post)
liked_post = LikedItem.objects.create(user=user, content_type=post_content_type, object_id=post.id)

# Liking a comment
comment_content_type = ContentType.objects.get_for_model(Comment)
liked_comment = LikedItem.objects.create(user=user, content_type=comment_content_type, object_id=comment.id)
"

Querying Liked Items:
You can query the LikedItem model to get all items a user has liked, regardless of their type.
"
liked_items = LikedItem.objects.filter(user=user)
for item in liked_items:
    print(item.content_object)  # This will print the related object (post or comment)
"
--------------------------------------------------------------------------------------------------------------------
#TODO => Objects
Objects: In the context of Django's ORM, objects refers to the manager for model classes, which provides methods to query the database and return multiple records.
When you call methods like Model.objects.all(), Model.objects.filter(), or Model.objects.get(), you're using the objects manager to perform database operations and retrieve records.
These methods return querysets, which can represent multiple records from the database.
#TODO => Instances
Instance: An instance refers to a single record of a model. When you create or retrieve a single record from the database, that record is an instance of the model class.
For example, when you create a new record with Model.objects.create(...) or retrieve a single record with Model.objects.get(...), you are working with an instance of that model.
#! NOTE -> In short, objects means all the records and instance means a single record of a model.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#! SECTION - 3 (Setting up the database)

A) Creating migrations
B) Running migrations
C) Reversing migrations
D) Populating the database

#* Press "Ctrl + T" to open "Go to symbol in workspace" and type the word you want to find and go that file.


1. Database Engines => SQLite, MySQL, PostgreSQL, MariaDB, Oracle and MS SQL Server. SQLite is used be default and MySQL, PostgreSQL are most widely used in production.
2. We create migration files by using the command: python manage.py makemigrations
3. We run migrations by using the command: python manage.py migrate
4. We have added a "SLUG" field to the product model. It is used to create a URL for the product which is optimized for SEO.

#! Key Points about the Meta Subclass in Django Models
#* Purpose:
The Meta subclass is used to define metadata for the Django model, influencing how it interacts with the database, behaves in queries, and is displayed in the Django admin interface.

#* Common Options:
* db_table: Specifies the name of the database table for the model. If not provided, Django uses a default name.
* ordering: Defines the default ordering for querysets. It can be a single field or a list of fields.
* verbose_name and verbose_name_plural: Specifies human-readable names for the model in singular and plural forms.
* abstract: If set to True, the model becomes an abstract base class and no database table is created for it.
* permissions: Defines custom permissions for the model.
* index_together: Specifies a list of field names that should be indexed together.
* index: Specifies that the model should be indexed in the database.
* unique_together: Specifies a list of field names that should be unique together.

#! NOTE --> Use "git reset --hard HEAD~1" to revert the last commit

5. Now we will install MySQL in our system
6. Create a new database using command "CREATE DATABASE storefront"
7. Now in our django project install MySQL client using "pip install mysqlclient"
8. Go to "https://mockaroo.com/" and create dummy data for our database. I have created dummy data for store_customer table.
9. Insert data in our database using any SQL editor.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#! SECTION - 4 (Django ORM)

A) Introduction to Django ORM
B) Querying and manipulating data
C) Filtering Data
D) Sorting Data
E) Ordering Data
G) Grouping Data, etc.

#TODO Refer Queryset API => "https://docs.djangoproject.com/en/5.0/ref/models/querysets/"

#! A) Introduction to Django ORM
* Reduce complexity in code
* Make the code more understandable
* Help us get more done in less time

#! B) Querying and manipulating data
1. Querying data => Using "query_set = Product.objects.all()" gives a queryset which is stored in a variable called query_set. Queryset is a collection of objects retrieved from the database.
2. Commonly used queryset api are filter(), exclude(), order_by(), distinct(), count(), first(), last(), reverse(), values_list(), values() etc.

#! Retrieving data
* query_set = Product.objects.all()
* query_set = Product.objects.get(id=1)
* query_set = Product.objects.get(pk=1)
* product = Product.objects.filter(id=1).first()
* product = Product.objects.filter(id=1).exists()

#! Filtering Data
* queryset = Product.objects.filter(unit_price__gt=20)
* queryset = Product.objects.filter(unit_price__lt=20)
* queryset = Product.objects.filter(unit_price__gte=20)
* queryset = Product.objects.filter(unit_price__lte=20)
* queryset = Product.objects.filter(unit_price__range=(20,30))
* queryset = Product.objects.filter(title__contains="coffee")
* queryset = Product.objects.filter(title__icontains="coffee")       # case insensitive
* queryset = Product.objects.filter(title__startswith="coffee")
* queryset = Product.objects.filter(title__istartswith="coffee")     # case insensitive
* queryset = Product.objects.filter(title__endswith="portioned")
* queryset = Product.objects.filter(title__iendswith="portioned")    # case insensitive
* queryset = Product.objects.filter(last_update__year=2024)
* queryset = Product.objects.filter(description__isnull=True)

* queryset = Product.objects.filter(inventory__lt=10, unit_price__lt=20)  # multiple filters can be combined


#TODO - Filtering Exercises
Write code to find: 
• Customers with .com accounts => "queryset = Customer.objects.filter(email__endswith=".com")"
• Collections that don’t have a featured product => "queryset = Collection.objects.filter(featured_product__isnull=True)"
• Products with low inventory (less than 10) => "queryset = Product.objects.filter(inventory__lt=10)"
• Orders placed by customer with id = 1 => "queryset = Order.objects.filter(customer_id=1)"
• Order items for products in collection 3 => "queryset = OrderItem.objects.filter(product__collection__id=3)" This means that since product is a foreign key, we have to use the "product__" prefix. Then since collection is a foreign key in product, we have to use the "collection__" prefix. Then use the "id" to specify the collection id.

// My solution
"
    collection_id = 3
    collection = Collection.objects.get(id=collection_id)

    # Retrieve products in this collection
    products_in_collection = Product.objects.filter(collection=collection)

    # Now, get the order items for these products
    order_items_for_products_in_collection = OrderItem.objects.filter(product__in=products_in_collection)
"

'''
The requirement to retrieve order items for products in a specific collection (in this case, collection ID 3) can indeed be efficiently met using Django's double underscore syntax for filtering through relationships. This approach allows you to navigate through related models using the `__` separator, effectively performing a join-like operation without needing explicit joins.

In this line:

```python
queryset = OrderItem.objects.filter(product__collection__id=3)
```

- `OrderItem.objects` starts the query on the `OrderItem` model.
- `.filter()` specifies the condition for the query.
- `product__collection__id=3` navigates through the `product` relationship to its related `collection`, and then filters based on the `id` of that collection being 3.

This syntax tells Django to generate a SQL query that includes a join between the `OrderItem` and `Product` tables, and then another join between the `Product` and `Collection` tables, effectively filtering the `OrderItem` records based on the `id` of the `Collection`.

This approach is very efficient because it leverages Django's ORM capabilities to handle the complexity of the join operation behind the scenes, allowing you to focus on writing the logic for your application.
'''

#! Complex Filtering Data
1. We use Q objects to build complex queries
2. Used to filter based on multiple complex conditions in a single query
Approach - 1 => "queryset = Product.objects.filter(inventory__lt=10, unit_price__lt=20)" This is AND condition
Approach - 2 => "queryset = Product.objects.filter(inventory__lt=10).filter(unit_price__lt=20)" This is also AND condition
#? But to apply OR condition, we have to use "Q" objects. "Q" objects uses bitwise operators to combine multiple conditions.
Approach - 3 => "queryset = Product.objects.filter(Q(inventory__lt=10) | Q(unit_price__lt=20))" This is OR condition
Approach - 4 => "queryset = Product.objects.filter(Q(inventory__lt=10) & ~Q(unit_price__lt=20))" This is also AND condition with negation i.e NOT operator